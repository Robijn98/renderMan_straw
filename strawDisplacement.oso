OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: 
shader strawDisplacement
param	float	taperWidth	0.00100000005		%read{32,33} %write{2147483647,-1}
param	float	inwardFade	0.00899999961		%read{37,37} %write{2147483647,-1}
oparam	float	result	0		%read{31,38} %write{31,38}
global	float	u	%read{2,27} %write{2147483647,-1}
global	float	v	%read{8,34} %write{2147483647,-1}
local	float	twists	%read{2147483647,-1} %write{0,0}
local	float	helix_width	%read{16,21} %write{1,1}
local	float	s	%read{14,19} %write{7,7}
local	float	t	%read{14,19} %write{13,13}
local	float	stripeBoundary1	%read{18,18} %write{17,17}
local	float	linePos1	%read{25,25} %write{18,18}
local	float	stripeBoundary2	%read{24,24} %write{23,23}
local	float	linePos2	%read{26,26} %write{24,24}
local	float	linePos	%read{30,30} %write{26,26}
local	float	stagger	%read{30,30} %write{29,29}
local	float	startFalloff	%read{36,36} %write{32,32}
local	float	endFalloff	%read{36,36} %write{35,35}
local	float	endTaper	%read{37,37} %write{36,36}
const	float	$const1	1		%read{0,34} %write{2147483647,-1}
const	float	$const2	0.00499999989		%read{1,1} %write{2147483647,-1}
temp	float	$tmp1	%read{4,7} %write{2,2}
const	float	$const4	-1		%read{2,35} %write{2147483647,-1}
const	string	$const6	"mod"		%read{3,9} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{5,5}
temp	float	$tmp3	%read{5,5} %write{4,4}
temp	float	$tmp4	%read{7,7} %write{6,6}
temp	float	$tmp5	%read{10,13} %write{8,8}
const	float	$const8	8		%read{8,8} %write{2147483647,-1}
temp	float	$tmp6	%read{12,12} %write{11,11}
temp	float	$tmp7	%read{11,11} %write{10,10}
temp	float	$tmp8	%read{13,13} %write{12,12}
temp	float	$tmp9	%read{16,16} %write{15,15}
temp	float	$tmp10	%read{15,15} %write{14,14}
temp	int	$tmp11	%read{17,17} %write{16,16}
const	float	$const9	0.0500000007		%read{18,24} %write{2147483647,-1}
temp	float	$tmp12	%read{22,22} %write{20,20}
temp	float	$tmp13	%read{20,20} %write{19,19}
temp	float	$tmp14	%read{22,22} %write{21,21}
temp	int	$tmp15	%read{23,23} %write{22,22}
temp	float	$tmp16	%read{26,26} %write{25,25}
temp	float	$tmp17	%read{29,29} %write{28,28}
const	string	$const10	"uperlin"		%read{28,28} %write{2147483647,-1}
temp	float	$tmp18	%read{28,28} %write{27,27}
const	float	$const12	5		%read{27,27} %write{2147483647,-1}
const	float	$const13	-0.00999999978		%read{29,29} %write{2147483647,-1}
temp	float	$tmp19	%read{31,31} %write{30,30}
const	float	$const14	0		%read{32,32} %write{2147483647,-1}
temp	float	$tmp20	%read{35,35} %write{34,34}
temp	float	$tmp21	%read{34,34} %write{33,33}
temp	float	$tmp22	%read{38,38} %write{37,37}
code ___main___
# strawDisplacement.osl:9
#     float twists = 1.0;
	assign		twists $const1 	%filename{"strawDisplacement.osl"} %line{9} %argrw{"wr"}
# strawDisplacement.osl:10
#     float helix_width = 0.005;
	assign		helix_width $const2 	%line{10} %argrw{"wr"}
# strawDisplacement.osl:12
#     float s = mod((u) * -1, 1);
	mul		$tmp1 u $const4 	%line{12} %argrw{"wrr"}
	functioncall	$const6 8 	%argrw{"r"}
# /opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp3 $tmp1 $const1 	%filename{"/opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp2 $tmp3 	%argrw{"wr"}
	mul		$tmp4 $const1 $tmp2 	%argrw{"wrr"}
	sub		s $tmp1 $tmp4 	%argrw{"wrr"}
# strawDisplacement.osl:13
#     float t = mod((v) * 8, 1);
	mul		$tmp5 v $const8 	%filename{"strawDisplacement.osl"} %line{13} %argrw{"wrr"}
	functioncall	$const6 14 	%argrw{"r"}
# /opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp7 $tmp5 $const1 	%filename{"/opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp8 $const1 $tmp6 	%argrw{"wrr"}
	sub		t $tmp5 $tmp8 	%argrw{"wrr"}
# strawDisplacement.osl:15
#     float stripeBoundary1 = abs(s - t) < helix_width;
	sub		$tmp10 s t 	%filename{"strawDisplacement.osl"} %line{15} %argrw{"wrr"}
	abs		$tmp9 $tmp10 	%argrw{"wr"}
	lt		$tmp11 $tmp9 helix_width 	%argrw{"wrr"}
	assign		stripeBoundary1 $tmp11 	%argrw{"wr"}
# strawDisplacement.osl:16
#     float linePos1 = smoothstep(0.05, 0.05, stripeBoundary1);
	smoothstep	linePos1 $const9 $const9 stripeBoundary1 	%line{16} %argrw{"wrrr"}
# strawDisplacement.osl:18
#     float stripeBoundary2 = abs(s - t) < (1 - helix_width);
	sub		$tmp13 s t 	%line{18} %argrw{"wrr"}
	abs		$tmp12 $tmp13 	%argrw{"wr"}
	sub		$tmp14 $const1 helix_width 	%argrw{"wrr"}
	lt		$tmp15 $tmp12 $tmp14 	%argrw{"wrr"}
	assign		stripeBoundary2 $tmp15 	%argrw{"wr"}
# strawDisplacement.osl:19
#     float linePos2 = smoothstep(0.05, 0.05, stripeBoundary2);
	smoothstep	linePos2 $const9 $const9 stripeBoundary2 	%line{19} %argrw{"wrrr"}
# strawDisplacement.osl:21
#     float linePos = (linePos1 * -1) + linePos2;
	mul		$tmp16 linePos1 $const4 	%line{21} %argrw{"wrr"}
	add		linePos $tmp16 linePos2 	%argrw{"wrr"}
# strawDisplacement.osl:22
#     float stagger = noise("uperlin", u * 5) * -0.01; 
	mul		$tmp18 u $const12 	%line{22} %argrw{"wrr"}
	noise		$tmp17 $const10 $tmp18 	%argrw{"wrr"}
	mul		stagger $tmp17 $const13 	%argrw{"wrr"}
# strawDisplacement.osl:24
#     result += linePos * stagger;
	mul		$tmp19 linePos stagger 	%line{24} %argrw{"wrr"}
	add		result result $tmp19 	%argrw{"wrr"}
# strawDisplacement.osl:27
#     float startFalloff = smoothstep(0.0, taperWidth, v);
	smoothstep	startFalloff $const14 taperWidth v 	%line{27} %argrw{"wrrr"}
# strawDisplacement.osl:28
#     float endFalloff = (smoothstep(1.0, 1.0-taperWidth, v)) * -1;
	sub		$tmp21 $const1 taperWidth 	%line{28} %argrw{"wrr"}
	smoothstep	$tmp20 $const1 $tmp21 v 	%argrw{"wrrr"}
	mul		endFalloff $tmp20 $const4 	%argrw{"wrr"}
# strawDisplacement.osl:29
#     float endTaper = startFalloff + endFalloff;
	add		endTaper startFalloff endFalloff 	%line{29} %argrw{"wrr"}
# strawDisplacement.osl:31
#     result -= endTaper * inwardFade;
	mul		$tmp22 endTaper inwardFade 	%line{31} %argrw{"wrr"}
	sub		result result $tmp22 	%argrw{"wrr"}
	end
